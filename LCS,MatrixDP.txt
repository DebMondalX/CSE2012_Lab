#include<bits/stdc++.h>
using namespace std;
int main(){
    int n,w;
    float profit=0;
    cin >> n >> w;
    vector<pair<int,int>> wp;
    for (int i = 0; i <n ; ++i) {
        int val;
        int weight;
        cin >> val >> weight;
        wp.push_back(make_pair(val,weight));
    }
    sort(wp.begin(),wp.end());
    /*for (int i = 0; i <n ; ++i) {
        cout << wp[i].first <<" "<<wp[i].second<<" ,";
    }
     */
    for (int i = 0; i <n ; ++i) {
        if (w >0){
            if (w-wp[i].second>=wp[i].second){
                profit += wp[i].first;
                w -= wp[i].second;
            }
            else{
                float fraction = float(w)/(float)wp[i].second;
                float pr = fraction*wp[i].first;
                profit += pr;
                w =0;
            }
        }
    }
    cout << "DEBARGHYA MONDAL 20BCE0690"<<endl;
    cout << "Ans by greedy method #3 :"<<endl;
    cout << profit <<endl;

    return 0;
}

#################################################################################

/* Dynamic Programming implementation of LCS problem */
#include<iostream>
#include<cstring>
#include<cstdlib>
using namespace std;

/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
void lcs( string X , string Y, int m, int n )
{
    int L[m+1][n+1];

/* Following steps build L[m+1][n+1] in bottom up fashion. Note
	that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
    for (int i=0; i<=m; i++)
    {
        for (int j=0; j<=n; j++)
        {
            if (i == 0 || j == 0)
                L[i][j] = 0;
            else if (X[i-1] == Y[j-1])
                L[i][j] = L[i-1][j-1] + 1;
            else
                L[i][j] = max(L[i-1][j], L[i][j-1]);
        }
    }

// Following code is used to print LCS
    int index = L[m][n];

// Create a character array to store the lcs string
    char lcs[index+1];
    lcs[index] = '\0'; // Set the terminating character

// Start from the right-most-bottom-most corner and
// one by one store characters in lcs[]
    int i = m, j = n;
    while (i > 0 && j > 0)
    {
        // If current character in X[] and Y are same, then
        // current character is part of LCS
        if (X[i-1] == Y[j-1])
        {
            lcs[index-1] = X[i-1]; // Put current character in result
            i--; j--; index--;	 // reduce values of i, j and index
        }

            // If not same, then find the larger of two and
            // go in the direction of larger value
        else if (L[i-1][j] > L[i][j-1])
            i--;
        else
            j--;
    }

// Print the lcs
    cout << "LCS of " << X << " and " << Y << " is " << lcs <<endl;
    cout << "Size of LCS is " << sizeof(lcs)-1;
}

/* Driver program to test above function */
int main()
{
    string X,Y;
    cout <<"Debarghya Mondal  20BCE0690"<<endl;
    cout <<"Enter the first string :" <<endl;
    cin >> X ;
    cout <<"Enter the second string:" <<endl;
    cin >> Y;
    int m = X.size();
    int n = Y.size();
    lcs(X, Y, m, n);
    return 0;
}



#####################################################


// C++ program using memoization
#include <bits/stdc++.h>
using namespace std;
int dp[100][100];

// Function for matrix chain multiplication
int matrixChainMemoised(int* p, int i, int j)
{
    if (i == j)
    {
        return 0;
    }
    if (dp[i][j] != -1)
    {
        return dp[i][j];
    }
    dp[i][j] = INT_MAX;
    for (int k = i; k < j; k++)
    {
        dp[i][j] = min(
                dp[i][j], matrixChainMemoised(p, i, k)
                          + matrixChainMemoised(p, k + 1, j)
                          + p[i - 1] * p[k] * p[j]);
    }
    return dp[i][j];
}
int MatrixChainOrder(int* p, int n)
{
    int i = 1, j = n - 1;
    return matrixChainMemoised(p, i, j);
}

// Driver Code
int main()
{
    int n; //no of matrices
    cout << "DEBARGHYA MONDAL 20BCE0690" <<endl;
    cout << "Enter the no. of matrices:" <<endl;
    cin >> n;
    int arr[n+1];
    for (int i = 0; i <n+1 ; ++i) {
        cin >> arr[i]; //input the dimensions of individual matrices
    }
    memset(dp, -1, sizeof dp);

    cout << "Minimum number of multiplications is "
         << MatrixChainOrder(arr, n+1);
}



